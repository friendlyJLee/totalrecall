diff -urN ../passwdsafe-6.16.1_original/passwdsafe/src/main/java/com/jefftharris/passwdsafe/PasswdSafeNewFileFragment.java passwdsafe/src/main/java/com/jefftharris/passwdsafe/PasswdSafeNewFileFragment.java
--- ../passwdsafe-6.16.1_original/passwdsafe/src/main/java/com/jefftharris/passwdsafe/PasswdSafeNewFileFragment.java	2018-07-07 23:31:56.000000000 -0500
+++ passwdsafe/src/main/java/com/jefftharris/passwdsafe/PasswdSafeNewFileFragment.java	2018-12-04 21:35:44.370892018 -0600
@@ -11,7 +11,6 @@
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
-import android.graphics.Typeface;
 import android.net.Uri;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
@@ -34,9 +33,7 @@
 import com.jefftharris.passwdsafe.lib.PasswdSafeUtil;
 import com.jefftharris.passwdsafe.lib.view.AbstractTextWatcher;
 import com.jefftharris.passwdsafe.lib.view.GuiUtils;
-import com.jefftharris.passwdsafe.lib.view.TypefaceUtils;
 import com.jefftharris.passwdsafe.util.CountedBool;
-import com.jefftharris.passwdsafe.view.PasswordVisibilityMenuHandler;
 import com.jefftharris.passwdsafe.view.TextInputUtils;
 
 import org.pwsafe.lib.file.Owner;
@@ -76,9 +73,11 @@
     private TextView itsPasswordConfirm;
     private Button itsOkBtn;
     private final CountedBool itsBackgroundDisable = new CountedBool();
-    private final Validator itsValidator = new Validator();
+    //private final Validator itsValidator = new Validator();
     private boolean itsUseStorage = false;
 
+    PBKDF2Authenticator pbkdf2Auth;
+
     private static final String ARG_URI = "uri";
 
     private static final int CREATE_DOCUMENT_REQUEST = 0;
@@ -151,28 +150,32 @@
                 }
             }
         });
-        itsValidator.registerTextView(itsFileName);
+        //itsValidator.registerTextView(itsFileName);
 
         Context ctx = getContext();
         itsPasswordInput = rootView.findViewById(R.id.password_input);
         itsPassword = rootView.findViewById(R.id.password);
-        TypefaceUtils.setMonospace(itsPassword, ctx);
-        itsValidator.registerTextView(itsPassword);
-        itsPasswordInput.setTypeface(Typeface.DEFAULT);
+        //TypefaceUtils.setMonospace(itsPassword, ctx);
+        //itsValidator.registerTextView(itsPassword);
+        //itsPasswordInput.setTypeface(Typeface.DEFAULT);
 
         itsPasswordConfirmInput =
                 rootView.findViewById(R.id.password_confirm_input);
         itsPasswordConfirm = rootView.findViewById(R.id.password_confirm);
-        TypefaceUtils.setMonospace(itsPasswordConfirm, ctx);
-        itsValidator.registerTextView(itsPasswordConfirm);
-        itsPasswordConfirmInput.setTypeface(Typeface.DEFAULT);
-        PasswordVisibilityMenuHandler.set(ctx, itsPassword, itsPasswordConfirm);
+        //TypefaceUtils.setMonospace(itsPasswordConfirm, ctx);
+        //itsValidator.registerTextView(itsPasswordConfirm);
+        //itsPasswordConfirmInput.setTypeface(Typeface.DEFAULT);
+//        PasswordVisibilityMenuHandler.set(ctx, itsPassword, itsPasswordConfirm);
+
+        pbkdf2Auth = new PBKDF2Authenticator();
+        pbkdf2Auth.bind((EditText)itsPassword, (EditText)itsPasswordConfirm);
+
 
         Button cancelBtn = rootView.findViewById(R.id.cancel);
         cancelBtn.setOnClickListener(this);
         itsOkBtn = rootView.findViewById(R.id.ok);
         itsOkBtn.setOnClickListener(this);
-        setValid(false);
+        //setValid(false);
 
         GuiUtils.setupFormKeyboard(itsFileName, itsPasswordConfirm, itsOkBtn,
                                    getActivity());
@@ -192,7 +195,7 @@
     {
         super.onResume();
         itsListener.updateViewFileNew();
-        itsValidator.validate();
+        //itsValidator.validate();
     }
 
     @Override
@@ -213,6 +216,8 @@
             break;
         }
         case R.id.ok: {
+            pbkdf2Auth.init();
+
             String fileName = itsFileName.getText().toString();
             if (itsUseStorage) {
                 Intent createIntent = new Intent(
@@ -228,8 +233,10 @@
 
                 startActivityForResult(createIntent, CREATE_DOCUMENT_REQUEST);
              } else {
+
+
                 Owner<PwsPassword> passwd =
-                        new Owner<>(new PwsPassword(itsPassword.getText()));
+                        new Owner<>(new PwsPassword(pbkdf2Auth.getKey()));
                 try {
                     startTask(new NewTask(fileName, passwd.pass(), this));
                 } finally {
@@ -299,7 +306,8 @@
         if (itsUseStorage) {
             String fileName = itsFileName.getText().toString();
             Owner<PwsPassword> passwd =
-                    new Owner<>(new PwsPassword(itsPassword.getText()));
+                    new Owner<>(new PwsPassword(pbkdf2Auth.getKey()));
+
             try {
                 startTask(new NewTask(fileName, passwd.pass(), this));
             } finally {
@@ -376,7 +384,7 @@
         itsPasswordInput.setEnabled(enabled);
         itsPasswordConfirmInput.setEnabled(enabled);
         itsBackgroundDisable.update(!enabled);
-        itsValidator.validate();
+        //itsValidator.validate();
     }
 
     /**
diff -urN ../passwdsafe-6.16.1_original/passwdsafe/src/main/java/com/jefftharris/passwdsafe/PasswdSafeOpenFileFragment.java passwdsafe/src/main/java/com/jefftharris/passwdsafe/PasswdSafeOpenFileFragment.java
--- ../passwdsafe-6.16.1_original/passwdsafe/src/main/java/com/jefftharris/passwdsafe/PasswdSafeOpenFileFragment.java	2018-07-07 23:31:56.000000000 -0500
+++ passwdsafe/src/main/java/com/jefftharris/passwdsafe/PasswdSafeOpenFileFragment.java	2018-12-04 21:35:44.386892018 -0600
@@ -34,6 +34,7 @@
 import android.widget.Button;
 import android.widget.CheckBox;
 import android.widget.CompoundButton;
+import android.widget.EditText;
 import android.widget.ProgressBar;
 import android.widget.TextView;
 
@@ -135,7 +136,7 @@
     private YubiState itsYubiState = YubiState.UNAVAILABLE;
     private int itsYubiSlot = 2;
     private boolean itsIsYubikey = false;
-    private String itsUserPassword;
+//    private String itsUserPassword;
     private int itsRetries = 0;
     private Phase itsPhase = Phase.INITIAL;
     private TextWatcher itsErrorClearingWatcher;
@@ -145,6 +146,8 @@
     private static final String STATE_SLOT = "slot";
     private static final String TAG = "PasswdSafeOpenFileFragment";
 
+    // JAEHO ADDED
+    final PBKDF2Authenticator pbkdf2Auth = new PBKDF2Authenticator();
 
     /**
      * Create a new instance
@@ -195,6 +198,8 @@
         TypefaceUtils.setMonospace(itsPasswordEdit, ctx);
         itsPasswordEdit.setEnabled(false);
 
+        pbkdf2Auth.bind((EditText)itsPasswordEdit);
+
         itsReadonlyCb = rootView.findViewById(R.id.read_only);
         itsReadonlyMsg = rootView.findViewById(R.id.read_only_msg);
         GuiUtils.setVisible(itsReadonlyMsg, false);
@@ -378,6 +383,7 @@
             break;
         }
         case R.id.ok: {
+            pbkdf2Auth.init();
             if (itsYubikeyCb.isChecked()) {
                 setPhase(Phase.YUBIKEY);
             } else {
@@ -512,7 +518,7 @@
             break;
         }
         case WAITING_PASSWORD: {
-            itsUserPassword = itsPasswordEdit.getText().toString();
+            //itsUserPassword = itsPasswordEdit.getText().toString();
             cancelSavedPasswordUsers();
             break;
         }
@@ -671,13 +677,24 @@
             itsSaveChange = SavePasswordChange.NONE;
         }
 
+//        Owner<PwsPassword> passwd =
+//                new Owner<>(new PwsPassword(itsPasswordEdit.getText()));
+//
+//        // JAEHO ADDED
+//        ((EditText)itsPasswordEdit).getText().clear();
+//        itsPasswordEdit.setText("");
+
         Owner<PwsPassword> passwd =
-                new Owner<>(new PwsPassword(itsPasswordEdit.getText()));
+                new Owner<>(new PwsPassword(pbkdf2Auth.getKey()));
+
+
         try {
             startTask(new OpenTask(passwd.pass(), readonly, this));
         } finally {
             passwd.close();
         }
+
+        Runtime.getRuntime().gc();
     }
 
     /**
@@ -918,7 +935,8 @@
         @Override
         public String getUserPassword()
         {
-            return itsUserPassword;
+            //JAEHO return itsUserPassword;
+            return "";
         }
 
         @Override
@@ -1249,8 +1267,9 @@
             PasswdSafeUtil.dbginfo(itsTag, "success");
             Cipher cipher = result.getCryptoObject().getCipher();
             try {
-                itsSavedPasswordsMgr.addSavedPassword(getPasswdFileUri(),
-                                                      itsUserPassword, cipher);
+                // JAEHO
+                //itsSavedPasswordsMgr.addSavedPassword(getPasswdFileUri(),
+                //                                      itsUserPassword, cipher);
                 finish(SavedPasswordFinish.SUCCESS,
                        getString(R.string.password_saved));
             } catch (Exception e) {
diff -urN ../passwdsafe-6.16.1_original/passwdsafe/src/main/java/com/jefftharris/passwdsafe/PBKDF2Authenticator.java passwdsafe/src/main/java/com/jefftharris/passwdsafe/PBKDF2Authenticator.java
--- ../passwdsafe-6.16.1_original/passwdsafe/src/main/java/com/jefftharris/passwdsafe/PBKDF2Authenticator.java	1969-12-31 18:00:00.000000000 -0600
+++ passwdsafe/src/main/java/com/jefftharris/passwdsafe/PBKDF2Authenticator.java	2018-12-04 21:35:44.394892018 -0600
@@ -0,0 +1,174 @@
+package com.jefftharris.passwdsafe;
+
+import android.provider.Settings;
+import android.util.Log;
+import android.widget.EditText;
+
+import java.math.BigInteger;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.security.spec.InvalidKeySpecException;
+import java.util.Arrays;
+
+import javax.crypto.SecretKeyFactory;
+import javax.crypto.spec.PBEKeySpec;
+
+class PBKDF2Authenticator {
+
+
+    private String derivedKey = null;
+    private EditText passwordEditText;
+    private EditText passwordConfirmEditText;
+    private char [] tempPassword;
+    SecureRandom random = new SecureRandom();
+
+    static final int iterations = 1000;
+
+    public void bind(EditText passwordWidget) {
+        // TODO: Check etUsername
+
+        passwordEditText = passwordWidget;
+    }
+
+
+    public void bind(EditText passwordWidget, EditText passwordWidget2) {
+        passwordEditText = passwordWidget;
+        passwordConfirmEditText = passwordWidget2;
+    }
+
+
+    private static byte[] getSalt() throws NoSuchAlgorithmException
+    {
+        SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
+        byte[] salt = new byte[16];
+        sr.nextBytes(salt);
+        return salt;
+    }
+
+    private static String toHex(byte[] array)
+    {
+        BigInteger bi = new BigInteger(1, array);
+        String hex = bi.toString(16);
+        int paddingLength = (array.length * 2) - hex.length();
+        if(paddingLength > 0)
+        {
+            return String.format("%0"  +paddingLength + "d", 0) + hex;
+        }else{
+            return hex;
+        }
+    }
+
+    private static boolean validatePassword(String originalPassword, String storedPassword) throws NoSuchAlgorithmException, InvalidKeySpecException
+    {
+        String[] parts = storedPassword.split(":");
+        int iterations = Integer.parseInt(parts[0]);
+        byte[] salt = fromHex(parts[1]);
+        byte[] hash = fromHex(parts[2]);
+
+        PBEKeySpec spec = new PBEKeySpec(originalPassword.toCharArray(), salt, iterations, hash.length * 8);
+        SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
+        byte[] testHash = skf.generateSecret(spec).getEncoded();
+
+        int diff = hash.length ^ testHash.length;
+        for(int i = 0; i < hash.length && i < testHash.length; i++)
+        {
+            diff |= hash[i] ^ testHash[i];
+        }
+        return diff == 0;
+    }
+
+    private static byte[] fromHex(String hex)
+    {
+        byte[] bytes = new byte[hex.length() / 2];
+        for(int i = 0; i<bytes.length ;i++)
+        {
+            bytes[i] = (byte)Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16);
+        }
+        return bytes;
+    }
+
+    public void init() {
+        // TODO: Verify password strength
+
+        // Do derivated Step
+        // TODO: getText get once?
+        tempPassword = new char[passwordEditText.getText().length()];
+        for (int i = 0; i < passwordEditText.getText().length(); i++) {
+            tempPassword[i] = (passwordEditText.getText().charAt(i));
+        }
+
+        try {
+            byte[] salt = new byte [] {'s', 'a', 'l', 't'};
+
+            PBEKeySpec spec = new PBEKeySpec(tempPassword, salt, iterations, 64 * 8);
+            SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
+            byte[] hash = skf.generateSecret(spec).getEncoded();
+            spec.clearPassword();
+            derivedKey = iterations + ":" + toHex(salt) + ":" + toHex(hash);
+        } catch (Exception e){
+            e.printStackTrace();
+        }
+
+        // Clean up password
+        passwordEditText.getText().clear();
+        passwordEditText.setText("");
+
+        if (passwordConfirmEditText != null){
+            passwordConfirmEditText.getText().clear();
+            passwordConfirmEditText.setText("");
+        }
+
+        // TODO: Other way
+        Arrays.fill(tempPassword, (char) 0xA5A5);
+        Arrays.fill(tempPassword, (char) 0x5A5A);
+        Arrays.fill(tempPassword, (char) 0);
+        for (int i = 0; i < tempPassword.length; i++) {
+            tempPassword[i] = (char) random.nextInt();      // prevent optimization
+        }
+    }
+
+    public void initWithSalt() {
+        // TODO: Verify password strength
+
+        // Do derivated Step
+        // TODO: getText get once?
+        tempPassword = new char[passwordEditText.getText().length()];
+        for (int i = 0; i < passwordEditText.getText().length(); i++) {
+            tempPassword[i] = (passwordEditText.getText().charAt(i));
+        }
+
+        try {
+            byte[] salt = getSalt();
+
+            PBEKeySpec spec = new PBEKeySpec(tempPassword, salt, iterations, 64 * 8);
+            SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
+            byte[] hash = skf.generateSecret(spec).getEncoded();
+            derivedKey = iterations + ":" + toHex(salt) + ":" + toHex(hash);
+        } catch (Exception e){
+            e.printStackTrace();
+        }
+
+        // Clean up password
+        passwordEditText.getText().clear();
+        passwordEditText.setText("");
+
+        if (passwordConfirmEditText != null){
+            passwordConfirmEditText.getText().clear();
+            passwordConfirmEditText.setText("");
+        }
+
+        // TODO: Other way
+        Arrays.fill(tempPassword, (char) 0xA5A5);
+        Arrays.fill(tempPassword, (char) 0x5A5A);
+        Arrays.fill(tempPassword, (char) 0);
+        for (int i = 0; i < tempPassword.length; i++) {
+            tempPassword[i] = (char) random.nextInt();      // prevent optimization
+        }
+    }
+
+    public CharSequence getKey() {
+        return derivedKey;
+    }
+
+}
